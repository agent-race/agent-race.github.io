(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[149],{99733:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/bugsandfeatures",function(){return n(56440)}])},56440:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var a=n(85893),i=n(43078),r=n(28008),o=n(54410),s=n(8207),l=n(80929),c=n(41295);n(78401);var d=n(72290),p=n.n(d);function u(){return(0,a.jsxs)(i.W,{children:[(0,a.jsx)(r.D,{order:1,className:p().pagetitle,children:"Bugs/Features"}),(0,a.jsxs)(o.x,{children:["This page summarizes the observed abnormal behaviours of studied frameworks during our experiments.",(0,a.jsx)("br",{})]}),(0,a.jsx)(r.D,{order:2,className:p().pagetitle,children:"LangChain"}),(0,a.jsxs)(s.K,{bg:"var(--mantine-color-body)",gap:"sm",children:[(0,a.jsx)(l.E,{src:"langchain_abs.png",alt:"defenses",radius:"md",h:"auto",w:"50%",fit:"contain",mx:"auto"}),(0,a.jsxs)(o.x,{children:["LangChain's high level of abstraction and encapsulation posed challenges in measuring specific metrics during our experiments.",(0,a.jsx)("br",{})]}),(0,a.jsx)(l.E,{src:"langchain_bug.png",alt:"defenses",radius:"md",h:"auto",w:"100%",fit:"contain",mx:"auto"}),(0,a.jsx)(o.x,{children:"Additionally, LangChain occasionally terminated processes prematurely after reading files from the GAIA dataset, returning the file content directly rather than proceeding with the expected operations."})]}),(0,a.jsx)(r.D,{order:2,className:p().pagetitle,children:"AutoGen"}),(0,a.jsx)(o.x,{children:"Due to the default system prompt being relatively long and containing irrelevant instructions, the RAG workflow may consume unnecessary tokens or produce unexpected errors (e.g., attempting to invoke non-existent tools). Therefore, it is necessary for users to customize the system prompt."}),(0,a.jsx)(r.D,{order:2,className:p().pagetitle,children:"AgentScope"}),(0,a.jsxs)(s.K,{bg:"var(--mantine-color-body)",gap:"sm",children:[(0,a.jsxs)(o.x,{children:["AgentScope’s image and audio processing tools internally rely on OpenAI models, causing their execution time to partially overlap with that of the LLM itself. This overlap can lead to inflated or inaccurate measurements of LLM processing time. Researchers and practitioners should be mindful of this issue when conducting time-based evaluations involving AgentScope.",(0,a.jsx)("br",{})]}),(0,a.jsx)(c.P,{code:'def openai_image_to_text(\n    image_urls: Union[str, list[str]],\n    api_key: str,\n    prompt: str = "Describe the image",\n    model: Literal["gpt-4o", "gpt-4-turbo"] = "gpt-4o",\n) -> ServiceResponse:\n    """\n    Generate descriptive text for given image(s) using a specified model, and\n    return the generated text.\n\n    Args:\n        image_urls (`Union[str, list[str]]`):\n            The URL or list of URLs pointing to the images that need to be\n            described.\n        api_key (`str`):\n            The API key for the OpenAI API.\n        prompt (`str`, defaults to `"Describe the image"`):\n            The prompt that instructs the model on how to describe\n            the image(s).\n        model (`Literal["gpt-4o", "gpt-4-turbo"]`, defaults to `"gpt-4o"`):\n            The model to use for generating the text descriptions.\n\n    Returns:\n        `ServiceResponse`:\n            A dictionary with two variables: `status` and `content`.\n            If `status` is `ServiceExecStatus.SUCCESS`,\n            the `content` contains the generated text description(s).\n\n    Example:\n\n        .. code-block:: python\n\n            image_url = "https://example.com/image.jpg"\n            api_key = "YOUR_API_KEY"\n            print(openai_image_to_text(image_url, api_key))\n\n        > {\n        >     \'status\': \'SUCCESS\',\n        >     \'content\': "A detailed description of the image..."\n        > }\n    """\n    openai_chat_wrapper = OpenAIChatWrapper(\n        config_name="image_to_text_service_call",\n        model_name=model,\n        api_key=api_key,\n    )\n    messages = Msg(\n        name="service_call",\n        role="user",\n        content=prompt,\n        url=image_urls,\n    )\n    openai_messages = openai_chat_wrapper.format(messages)\n    try:\n        response = openai_chat_wrapper(openai_messages)\n        return ServiceResponse(ServiceExecStatus.SUCCESS, response.text)\n    except Exception as e:\n        return ServiceResponse(ServiceExecStatus.ERROR, str(e))\n\ndef openai_audio_to_text(\n    audio_file_url: str,\n    api_key: str,\n    language: str = "en",\n    temperature: float = 0.2,\n) -> ServiceResponse:\n    """\n    Convert an audio file to text using OpenAI\'s transcription service.\n\n    Args:\n        audio_file_url (`str`):\n            The file path or URL to the audio file that needs to be\n            transcribed.\n        api_key (`str`):\n            The API key for the OpenAI API.\n        language (`str`, defaults to `"en"`):\n            The language of the input audio. Supplying the input language in\n            [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)\n            format will improve accuracy and latency.\n        temperature (`float`, defaults to `0.2`):\n            The temperature for the transcription, which affects the\n            randomness of the output.\n\n    Returns:\n        `ServiceResponse`:\n            A dictionary with two variables: `status` and `content`.\n            If `status` is `ServiceExecStatus.SUCCESS`,\n            the `content` contains a dictionary with key \'transcription\' and\n            value as the transcribed text.\n\n    Example:\n\n        .. code-block:: python\n\n            audio_file_url = "/path/to/audio.mp3"\n            api_key = "YOUR_API_KEY"\n            print(openai_audio_to_text(audio_file_url, api_key))\n\n        > {\n        >     \'status\': \'SUCCESS\',\n        >     \'content\': {\'transcription\': \'This is the transcribed text from\n        the audio file.\'}\n        > }\n    """\n    try:\n        import openai\n    except ImportError as e:\n        raise ImportError(\n            "The `openai` library is not installed. Please install it by "\n            "running `pip install openai`.",\n        ) from e\n\n    client = openai.OpenAI(api_key=api_key)\n    audio_file_url = os.path.abspath(audio_file_url)\n    with open(audio_file_url, "rb") as audio_file:\n        try:\n            transcription = client.audio.transcriptions.create(\n                model="whisper-1",\n                file=audio_file,\n                language=language,\n                temperature=temperature,\n            )\n            return ServiceResponse(\n                ServiceExecStatus.SUCCESS,\n                {"transcription": transcription.text},\n            )\n        except Exception as e:\n            return ServiceResponse(\n                ServiceExecStatus.ERROR,\n                f"Error: Failed to transcribe audio {str(e)}",\n)',language:"python"}),(0,a.jsxs)(o.x,{children:["Meanwhile, AgentScope's vector database module, LlamaIndexKnowledge, is implemented based on the BM25Retriever from the llamaindex library. However, the original implementation relies on an outdated version of llamaindex, and recent updates to the library introduced structural changes that break compatibility with the original import statements.",(0,a.jsx)("br",{})]}),(0,a.jsx)(c.P,{code:"from llama_index.retrievers.bm25 import BM25Retriever",language:"python"}),(0,a.jsx)(o.x,{children:"To ensure a consistent environment without modifying the framework’s built-in vector database logic, we resolved the issue by duplicating the LlamaIndexKnowledge module and updating the import paths to match the newer llamaindex version."}),(0,a.jsx)(c.P,{code:"from llama_index.legacy.retrievers.bm25_retriever import BM25Retriever",language:"python"})]}),(0,a.jsx)(r.D,{order:2,className:p().pagetitle,children:"CrewAI"}),(0,a.jsx)(o.x,{children:"When our MOA invokes a large number of agents (>=12), CrewAI system occasionally fails to call all agents completely during execution as intended. For example, when we request 12 sub-agents to be activated, some queries may only trigger 9 or fewer agents."}),(0,a.jsx)(r.D,{order:2,className:p().pagetitle,children:"Llamaindex"}),(0,a.jsxs)(s.K,{bg:"var(--mantine-color-body)",gap:"sm",children:[(0,a.jsx)(l.E,{src:"llamaindex_bug.jpg",alt:"radar",radius:"md",h:"auto",w:"75%",fit:"contain",mx:"auto"}),(0,a.jsx)(o.x,{children:"LlamaIndex frequently fails to invoke tools correctly, primarily due to the lack of prompt constraints and insufficient post-processing checks on LLM outputs. Without explicit guidance and validation mechanisms, the LLM often produces outputs that do not conform to the expected dictionary format, resulting in tool invocation failures."})]}),(0,a.jsx)(r.D,{order:2,className:p().pagetitle,children:"Phidata"}),(0,a.jsxs)(s.K,{bg:"var(--mantine-color-body)",gap:"sm",children:[(0,a.jsx)(l.E,{src:"phidata_feature.jpg",alt:"radar",radius:"md",h:"auto",w:"100%",fit:"contain",mx:"auto"}),(0,a.jsx)(o.x,{children:'In the ReAct workflow, Phidata passes the available tools to the LLM via the "tools" field. Unlike Llamaindex, which emphasizes the functionality and usage of tools in the system prompt, Phidata rarely invokes the code execution tool when processing queries from humaneval.'})]}),(0,a.jsx)(r.D,{order:2,className:p().pagetitle,children:"PydanticAI"}),(0,a.jsxs)(s.K,{bg:"var(--mantine-color-body)",gap:"sm",children:[(0,a.jsx)(l.E,{src:"radar_tools.jpg",alt:"radar",radius:"md",h:"auto",w:"50%",fit:"contain",mx:"auto"}),(0,a.jsx)(l.E,{src:"pydantic_bug2.jpg",alt:"radar",radius:"md",h:"auto",w:"100%",fit:"contain",mx:"auto"}),(0,a.jsxs)(o.x,{children:["Within the Pydantic ReAct framework, we observed multiple simultaneous invocations of the same tool, which may lead to inefficiencies. Additionally, similar to Phidata, the code execution tool was seldom triggered.",(0,a.jsx)("br",{}),"Furthermore, the MoA implementation in the Pydantic framework is tool-based, and not all three models are invoked for every query."]})]})]})}},72290:function(e){e.exports={pagetitle:"common_pagetitle__4xBA6",block_orange:"common_block_orange__1r4bT",block_red:"common_block_red__sfVw_",block_green:"common_block_green__4w83L",block_blue:"common_block_blue__Ru_Ps",bibtext:"common_bibtext__b6Cmh"}}},function(e){e.O(0,[721,596,774,888,179],function(){return e(e.s=99733)}),_N_E=e.O()}]);